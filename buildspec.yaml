# Do not change version. This is the version of aws buildspec, not the version of your buildspec file.
version: 0.2

env:
  variables:
    IMAGE_NAME: 'cid-checker'
    PROJECT: 'filecoin'
    ENVIRONMENT: 'mainnet'
    SUB_ENV: 'glif'
    SHORT_REGION: 'apn1'
    AWS_ACCOUNT_ID: '499623857295'
    DOCKERUHUB_ORGANIZATION: 'protofire'
  secrets-manager:
    DOCKERHUB_USERNAME: "filecoin-mainnet-apn1-glif-dockerhub-glifio:username"
    DOCKERHUB_PASS: "filecoin-mainnet-apn1-glif-dockerhub-glifio:password"

phases:
  install:
    commands:
      - echo Environment Variables
      - BUILD_IMAGE_VERSION_TAG=$(cat ./release.yaml | cut -d ':' -f2)

      - printenv

      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

  pre_build:
    commands:
      - echo Build STARTED
      # This logic validates release version until push to the main branch.
      - IS_NEW_RELEASE=$(git diff --name-only HEAD~1 HEAD | grep release.yaml)
      - if [ -z "$(echo $IS_NEW_RELEASE)" ]; then echo "RELEASE VERSION DID NOT UPDATED" && exit 1; fi

      - docker build -t $IMAGE_NAME:latest .
      - docker tag $IMAGE_NAME:latest $IMAGE_NAME:$(echo $BUILD_IMAGE_VERSION_TAG)
  build:
    commands:
      - echo Image built
      - echo Build STARTED

      - docker tag $IMAGE_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT-$ENVIRONMENT-$SHORT_REGION-$SUB_ENV-$IMAGE_NAME:latest
      - docker tag $IMAGE_NAME:$(echo $BUILD_IMAGE_VERSION_TAG) $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT-$ENVIRONMENT-$SHORT_REGION-$SUB_ENV-$IMAGE_NAME:$(echo $BUILD_IMAGE_VERSION_TAG)
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT-$ENVIRONMENT-$SHORT_REGION-$SUB_ENV-$IMAGE_NAME:latest
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT-$ENVIRONMENT-$SHORT_REGION-$SUB_ENV-$IMAGE_NAME:$(echo $BUILD_IMAGE_VERSION_TAG)
      - docker logout
      - docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASS
      - docker tag $IMAGE_NAME:latest $DOCKERUHUB_ORGANIZATION/$IMAGE_NAME:latest
      - docker tag $IMAGE_NAME:$(echo $BUILD_IMAGE_VERSION_TAG) $DOCKERUHUB_ORGANIZATION/$IMAGE_NAME:$(echo $BUILD_IMAGE_VERSION_TAG)
      - docker push $DOCKERUHUB_ORGANIZATION/$IMAGE_NAME:latest
      - docker push $DOCKERUHUB_ORGANIZATION/$IMAGE_NAME:$(echo $BUILD_IMAGE_VERSION_TAG)
